# Pre-build Checks
# 1. Unit tests with code coverage (pytest)
# 2. Code quality analysis (flake8)
# 3. Dependency analysis (vulnerabilities)
# 4. Dependency analysis (copyleft licenses)

name: v2 Pre-build Checks Action

inputs:
  branch_to_test:
    description: 'Branch or tag to run test'
    required: true
    default: 'v2.x'
    type: string
  pr_num:
    description: 'PR number'
    required: true
    default: '000'
    type: string
  plugin_name:
    description: 'Name of plugin to test'
    required: true
    default: 'accumulated-local-effect'
  algo_name:
    description: 'Name of algo to test'
    required: true
    default: 'accumulated_local_effect'
  slack_url:
    description: 'Slack webhook URL for notifications'
    required: true
    type: string

outputs:
  unit_test_status:
    value: ${{ steps.unit_test.outputs.unit_test_status }}
  code_coverage_status: 
    value: ${{ steps.unit_test.outputs.code_coverage_status }}
  code_quality_status:
    value: ${{ steps.code_quality.outputs.code_quality_status }}
  dependency_status:
    value: ${{ steps.dependency_analysis.outputs.dependency_status }}
  license_status:
    value: ${{ steps.dependency_analysis.outputs.license_status }}

runs:
  using: "composite"

  steps:

    - name: Set env variables
      run: |
        echo "BRANCH_TO_TEST=${{ inputs.branch_to_test }}" >> $GITHUB_ENV
        echo "PLUGIN_NAME=${{ inputs.plugin_name }}" >> $GITHUB_ENV
        echo "ALGO_NAME=${{ inputs.algo_name }}" >> $GITHUB_ENV
        if [ "${{ inputs.algo_name }}" == "test_engine" ]; then
          echo "WDIR=aiverify-test-engine" >> $GITHUB_ENV
          echo "CI_DIR=../.ci" >> $GITHUB_ENV
        else
          echo "WDIR=stock-plugins/aiverify.stock.${{ inputs.plugin_name }}/algorithms/${{ inputs.algo_name }}" >> $GITHUB_ENV
          echo "CI_DIR=../../../../.ci" >> $GITHUB_ENV
        fi        
        echo "STATUS=success" >> $GITHUB_ENV
      shell: bash

    # Checkout code
    - name: Checkout code (plugin)
      if: ${{ env.ALGO_NAME != 'test_engine' }}
      uses: actions/checkout@v4
      with:
        ref: ${{ env.BRANCH_TO_TEST }}
        sparse-checkout: |
          stock-plugins/aiverify.stock.${{ env.PLUGIN_NAME }}/algorithms/${{ env.ALGO_NAME }}
          stock-plugins/user_defined_files
          .ci
          .github/actions/pre-build-checks-plugin

    - name: Checkout code (test-engine)
      if: ${{ env.ALGO_NAME == 'test_engine' }}
      uses: actions/checkout@v4
      with:
        ref: ${{ env.BRANCH_TO_TEST }}
        sparse-checkout: |
          aiverify-test-engine
          .ci
          .github/actions/pre-build-checks-plugin

    # Setup python    
    - name: Setup python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        cache: 'pip'

    # Install dependencies
    - name: Install dependencies
      working-directory: ${{ github.workspace }}/${{ env.WDIR }}
      run: |
        echo "Install dependencies"
        if [ "${{ inputs.algo_name }}" == "test_engine" ]; then
          pip install .[all] > /dev/null
        else
          pip install . > /dev/null
        fi
        pip install pipdeptree > /dev/null
        pipdeptree -fl 
        pip install pytest pytest-mock pytest-html pytest-json pytest-cov coverage anybadge > /dev/null
        pip install flake8 flake8-html > /dev/null
      shell: bash

    # Check 1: Unit tests & coverage    
    - name: Unit tests with coverage
      id: unit_test
      working-directory: ${{ github.workspace }}/${{ env.WDIR }}
      if: ${{ ! cancelled() }}
      run: |      
          set +e
          bash ${{ env.CI_DIR }}/run-test.sh aiverify_${{ env.ALGO_NAME }} -m
          source ${{ env.CI_DIR }}/gen_pre_build_summ.sh test aiverify_${{ env.ALGO_NAME }}
          test_status=$?
          source ${{ env.CI_DIR }}/gen_pre_build_summ.sh coverage aiverify_${{ env.ALGO_NAME }}
          coverage_status=$?
          echo "unit_test_status=$UNITTEST_SUMMARY" >> $GITHUB_OUTPUT
          echo "code_coverage_status=$COVERAGE_SUMMARY" >> $GITHUB_OUTPUT
          set -e
          if [ $test_status -ne 0 ] || [ $coverage_status -ne 0 ]; then
              echo "STATUS=failure" >> $GITHUB_ENV
              exit 1
          fi
      shell: bash

    # Check 2: Code quality analysis (flake8)
    - name: Code quality analysis (flake8)
      id: code_quality
      if: ${{ ! cancelled() }}
      working-directory: ${{ github.workspace }}/${{ env.WDIR }}
      run: |
        set +e
        cp ${{ env.CI_DIR }}/.flake8 .
        bash ${{ env.CI_DIR }}/run-flake8.sh aiverify_${{ env.ALGO_NAME }}
        source ${{ env.CI_DIR }}/gen_pre_build_summ.sh lint aiverify_${{ env.ALGO_NAME }}
        lint_status=$?
        echo "code_quality_status=$LINT_SUMMARY" >> $GITHUB_OUTPUT
        set -e
        if [ $lint_status -ne 0 ]; then
            echo "STATUS=failure" >> $GITHUB_ENV
            exit $lint_status
        fi
      shell: bash

    # Check 3: Dependency vulnerability & license analysis (pip-audit)
    - name: Dependency analysis (vulnerabilities & licenses)
      id: dependency_analysis
      if: ${{ ! cancelled() }}
      working-directory: ${{ github.workspace }}/${{ env.WDIR }}
      run: |
        set +e
        bash ${{ env.CI_DIR }}/run-pip-audit.sh aiverify_${{ env.ALGO_NAME }}
        source ${{ env.CI_DIR }}/gen_pre_build_summ.sh dependency aiverify_${{ env.ALGO_NAME }}
        dep_status=$?
        source ${{ env.CI_DIR }}/gen_pre_build_summ.sh license aiverify_${{ env.ALGO_NAME }}
        lic_status=$?
        echo "dependency_status=$DEPENDENCY_SUMMARY" >> $GITHUB_OUTPUT
        echo "license_status=$LICENSE_SUMMARY" >> $GITHUB_OUTPUT
        set -e
        if [ $dep_status -ne 0 ] || [ $lic_status -ne 0 ]; then
          echo "STATUS=failure" >> $GITHUB_ENV
          exit 1
        fi
      shell: bash

    # Send status to Slack 
    - name: Send slack notification
      if: ${{ ! cancelled() }}
      uses: slackapi/slack-github-action@v1.26.0
      with:
        payload: |
          {
            "workflow": "${{ github.repository }} | ${{ github.workflow }} | ${{ inputs.pr_num }} | ${{ env.ALGO_NAME }}",
            "status": "${{ env.STATUS }}",
            "details": "${{ steps.unit_test.outputs.unit_test_status }} | ${{ steps.unit_test.outputs.code_coverage_status }} | ${{ steps.code_quality.outputs.code_quality_status }} | ${{ steps.dependency_analysis.outputs.dependency_status }} | ${{ steps.dependency_analysis.outputs.license_status }}",
            "ref": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          }
      env:
        SLACK_WEBHOOK_URL: ${{ inputs.slack_url }}
