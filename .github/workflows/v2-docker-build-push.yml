# Docker Build & Push
# 1. Build docker image for amd64 and arm64
# 2. Push image to GitHub Container Registry (ghcr.io)

name: v2 Docker Build and Push

env:
  # Images to build
  IMAGE_NAMES:  'aiverify-apigw,
                 aiverify-portal,
                 aiverify-test-engine-worker'

  GITHUB_TOKEN: ${{ github.token }}
  
on:

  # Run this workflow manually from Actions tab
  workflow_dispatch:
    inputs:
      branch_to_test:
        description: 'Branch or tag to run docker build'
        required: true
        default: 'v2.x'
        type: string
      image_to_build:
        description: 'Name of image to build'
        required: true
        default: 'aiverify-apigw'
      image_tag:
        description: 'Image tag'
        required: false
        
  # push:
  #   branches: [ main ]
  #   paths:
  #     - 'aiverify-test-engine-worker/**'
  #     - 'aiverify-apigw/**'
  #     - 'aiverify-portal/**'

# Allow one concurrent deployment
concurrency:
  group: ${{ github.repository }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:

  init-image-build-push:
    # Run only when PR is assigned, even on subsequent commits (i.e. synchronize)
    # Also allow manual trigger
    if: (github.event_name == 'pull_request' && github.event.pull_request.assignee != null) || github.event_name == 'workflow_dispatch' || github.event_name == 'push'
    runs-on: ubuntu-latest
    outputs:
      branch_to_test: ${{ steps.prep_matrix.outputs.branch_to_test }}
      pr_num: ${{ steps.prep_matrix.outputs.pr_num }}
      image_tag: ${{ steps.prep_matrix.outputs.image_tag }}
      matrix: ${{ steps.prep_matrix.outputs.matrix }}
    
    timeout-minutes: 15

    steps:

      - name: Set env variables
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "BRANCH_TO_TEST=${{ github.event.pull_request.head.ref }}" >> "$GITHUB_ENV"
            echo "PR_NUM=#${{ github.event.pull_request.number }}" >> "$GITHUB_ENV"
            PR_FILES=$(gh pr view ${{ github.event.pull_request.number }} --repo github.com/${{ github.repository }} --json files --jq '.files[].path' | paste -sd "," -)
            echo "Files changed in this pull request:"
            echo "$PR_FILES"
            echo "CHANGED_FILES=${PR_FILES}" >> $GITHUB_ENV
            echo "IMAGE_TAG=" >> $GITHUB_ENV
          elif [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "BRANCH_TO_TEST=${{ inputs.branch_to_test }}" >> $GITHUB_ENV
            echo "PR_NUM=#000" >> $GITHUB_ENV
            echo "CHANGED_FILES=${{ inputs.image_to_build }}" >> $GITHUB_ENV
            echo "IMAGE_TAG=${{ inputs.image_tag }}" >> $GITHUB_ENV
          elif [ "${{ github.event_name }}" == "push" ]; then
            echo "BRANCH_TO_TEST=${{ github.ref }}" >> $GITHUB_ENV
            echo "PR_NUM=#000" >> $GITHUB_ENV
            PUSH_FILES=$(gh api repos/${{ github.repository }}/commits/${{ github.sha }} | jq -r '.files[].filename' | paste -sd "," -)
            echo "Files changed in this push:"
            echo "$PUSH_FILES"
            echo "CHANGED_FILES=${PUSH_FILES}" >> $GITHUB_ENV
            echo "IMAGE_TAG=" >> $GITHUB_ENV
          fi
    
      - name: Prepare matrix
        id: prep_matrix
        run: |
          FILE_LIST=${{ env.CHANGED_FILES }}
          IMAGE_NAMES=(${IMAGE_NAMES//,/ })
          
          declare -A IMAGE_MAP

          IFS=',' read -ra FILE_ARRAY <<< "$FILE_LIST"
          for file in "${FILE_ARRAY[@]}"; do
            for image in "${IMAGE_NAMES[@]}"; do
              # Check if the file path contains the image name
              if [[ $file == *"${image}"* ]]; then
                # Add image name to the associative array
                IMAGE_MAP["${image}"]="${image}"
              fi
            done
          done

          # Extract keys (image_name) from IMAGE_MAP map
          IMAGES_TO_BUILD=(${!IMAGE_MAP[@]})

          echo "IMAGES_TO_BUILD=${IMAGES_TO_BUILD[*]}" >> $GITHUB_ENV
          echo "Images to build: ${IMAGES_TO_BUILD[*]}"

          # # Create matrix
          # matrix_include=$(for image in "${IMAGES_TO_BUILD[@]}"; do echo "{\"image_name\":\"${image}\"}"; done | jq -s . | tr -d '[:space:]')
          # MATRIX="{\"include\":$matrix_include}"
          # echo $MATRIX

          # Create matrix
          matrix_include=$(for image in "${IMAGES_TO_BUILD[@]}"; do
            if [ "$image" == "aiverify-apigw" ]; then
              tag=$(grep -oP '(?<=version = ")[^"]*' $image/pyproject.toml)
              target="default-target"
            elif [ "$image" == "aiverify-portal" ]; then
              tag=$(grep -oP '(?<=version": ")[^"]*' $image/package.json)
              target="default-target"
            elif [ "$image" == "aiverify-test-engine-worker" ]; then
              tag=$(grep -oP '(?<=version = ")[^"]*' $image/pyproject.toml)
              target="default-target"
            else
              tag="default-tag"
              target="default-target"
            fi
            echo "{\"image_name\":\"${image}\", \"target\":\"${target}\", \"tag\":\"${tag}\"}"
          done | jq -s . | tr -d '[:space:]')
          MATRIX="{\"include\":$matrix_include}"
          echo $MATRIX

          matrix_include=$(for image in "${IMAGES_TO_BUILD[@]}"; do
            if [ "$image" == "aiverify-apigw" ]; then
              echo "{\"image_name\":\"${image}\", \"target\":\"\", \"tag_suffix\":\"\"}"
            elif [ "$image" == "aiverify-portal" ]; then
              echo "{\"image_name\":\"${image}\", \"target\":\"\", \"tag_suffix\":\"\"}"
            elif [ "$image" == "aiverify-test-engine-worker" ]; then
              echo "{\"image_name\":\"${image}\", \"target\":\"aiverify-test-engine-worker-base\", \"tag_suffix\":\"base\"}"
              echo "{\"image_name\":\"${image}\", \"target\":\"venv-build\", \"tag_suffix\":\"venv\"}"
              echo "{\"image_name\":\"${image}\", \"target\":\"docker-build\", \"tag_suffix\":\"docker\"}"
            else
              echo "STATUS=failure" >> $GITHUB_ENV
              echo "Invalid image value: ${image_name}"
              exit 1
            fi
          done | jq -s . | tr -d '[:space:]')
          MATRIX="{\"include\":$matrix_include}"
          echo $MATRIX

          echo "branch_to_test=${{ env.BRANCH_TO_TEST }}" >> $GITHUB_OUTPUT
          echo "pr_num=${{ env.PR_NUM }}" >> $GITHUB_OUTPUT
          echo "image_tag=${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT
          echo "matrix={\"include\":$matrix_include}" >> $GITHUB_OUTPUT

  run-image-image-build-push:
    needs: init-image-build-push
    runs-on: ubuntu-latest
    timeout-minutes: 360
    strategy:
      matrix: ${{ fromJson(needs.init-image-build-push.outputs.matrix) }}
      fail-fast: false
      max-parallel: 1
    steps:
      
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.init-image-build-push.outputs.branch_to_test }}

      # Free up disk space first as the image to build is very large
      - name: Free up disk space
        run: |
          bash .ci/free_disk_space.sh          

      - name: Build and push image
        id: build_push_image
        run: |
          if [ "${{ needs.init-image-build-push.outputs.image_tag }}" == "" ]; then
            if [ "${{ matrix.image_name }}" == "aiverify-test-engine-worker" ] || [ "${{ matrix.image_name }}" == "aiverify-apigw" ]; then
              tag=$(grep -oP '(?<=version = ")[^"]*' ${{ matrix.image_name }}/pyproject.toml)
            elif [ "${{ matrix.image_name }}" == "aiverify-portal" ]; then
              tag=$(grep -oP '(?<=version": ")[^"]*' ${{ matrix.image_name }}/package.json)
            else
              echo "STATUS=failure" >> $GITHUB_ENV
              echo "Invalid image value: ${{ matrix.image_name }}"
              exit 1
            fi
          else
            tag=${{ needs.init-image-build-push.outputs.image_tag }}
          fi

          set +e
          echo "Building image ${{ matrix.image_name}}:$tag ${{ matrix.target }} ${{ matrix.tag_suffix }}..."
          if [ "${{ matrix.target }}" == "" ]; then
            bash .ci/docker_build_push.sh ${{ matrix.image_name }} $tag aiverify-foundation ${{ matrix.image_name }}
          else
            bash .ci/docker_build_push.sh ${{ matrix.image_name }} $tag aiverify-foundation ${{ matrix.image_name }} ${{ matrix.target }} ${{ matrix.tag_suffix }}
          fi
          build_status=$?
          set -e
          if [ $build_status -ne 0 ]; then
              echo "STATUS=failure" >> $GITHUB_ENV
              exit 1
          fi


