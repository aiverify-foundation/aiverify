# Pre-build Checks
# 1. Unit tests with code coverage (pytest)
# 2. Code quality analysis (flake8)
# 3. Dependency analysis (vulnerabilities)
# 4. Dependency analysis (copyleft licenses)

name: v2 Pre-build Checks 

env:
  ALGO_NAMES:  'test_engine,
                accumulated_local_effect, fairness_metrics_toolbox_for_classification,
                fairness_metrics_toolbox_for_regression, blur_corruptions,
                digital_corruptions, environment_corruptions,
                general_corruptions, partial_dependence_plot,
                robustness_toolbox, shap_toolbox,
                veritastool'
  PLUGIN_NAMES: 'aiverify-test-engine,
                 accumulated-local-effect, fairness-metrics-toolbox-for-classification,
                 fairness-metrics-toolbox-for-regression, image-corruption-toolbox,
                 image-corruption-toolbox, image-corruption-toolbox, 
                 image-corruption-toolbox, partial-dependence-plot,
                 robustness-toolbox, shap-toolbox
                 veritas' 
  GH_TOKEN: ${{ github.token }}
  
on:
  # Runs when a pull request to main is being assigned
  pull_request:
    types: [ assigned, synchronize ]
    branches:
      - 'v2.x'
    paths:
      - 'aiverify-test-engine/**'
      - 'stock-plugins/**'

  # Run this workflow manually from Actions tab
  workflow_dispatch:
    inputs:
      branch_to_test:
        description: 'Branch or tag to run test'
        required: true
        default: 'v2.x'
        type: string
      algo_to_test:
        description: 'Name of algo to test'
        required: true
        default: 'accumulated_local_effect,shap_toolbox'
        
  push:
    branches: [ ci/v2-pre-build-checks' ]

# Allow one concurrent deployment
concurrency:
  group: ${{ github.repository }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:

  init-pre-build-checks:
    # Run only when PR is assigned, even on subsequent commits (i.e. synchronize)
    if: (github.event_name == 'pull_request' && github.event.pull_request.assignee != null) || github.event_name == 'workflow_dispatch' || github.event_name == 'push'
    runs-on: ubuntu-latest
    outputs:
      branch_to_test: ${{ steps.prep_matrix.outputs.branch_to_test }}
      pr_num: ${{ steps.prep_matrix.outputs.pr_num }}
      matrix: ${{ steps.prep_matrix.outputs.matrix }}
    
    timeout-minutes: 40

    steps:

      - name: Set env variables (pull request)
        if: github.event_name == 'pull_request'
        run: |
          echo "BRANCH_TO_TEST=${{ github.event.pull_request.head.ref }}" >> "$GITHUB_ENV"
          echo "PR_NUM=#${{ github.event.pull_request.number }}" >> "$GITHUB_ENV"
          PR_FILES=$(gh pr view ${{ github.event.pull_request.number }} --repo github.com/${{ github.repository }} --json files --jq '.files[].path' | paste -sd "," -)
          echo "Files changed in this pull request:"
          echo "$PR_FILES"
          echo "CHANGED_FILES=${PR_FILES}" >> $GITHUB_ENV

      - name: Set env variables (push)
        if: github.event_name == 'push'
        run: |
          echo "BRANCH_TO_TEST=${{ github.ref }}" >> "$GITHUB_ENV"
          echo "PR_NUM=#000" >> $GITHUB_ENV
          PUSH_FILES=$(gh api repos/${{ github.repository }}/commits/${{ github.sha }} | jq -r '.files[].filename' | paste -sd "," -)
          echo "Files changed in this push:"
          echo "$PUSH_FILES"
          echo "CHANGED_FILES=${PUSH_FILES}" >> $GITHUB_ENV

      - name: Set env variables (workflow dispatch)
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "BRANCH_TO_TEST=${{ inputs.branch_to_test }}" >> "$GITHUB_ENV"
          echo "PR_NUM=#000" >> $GITHUB_ENV
          echo "CHANGED_FILES=${{ inputs.algo_to_test }}" >> $GITHUB_ENV

      - name: Prepare Matrix
        id: prep_matrix
        run: |
          FILE_LIST=${{ env.CHANGED_FILES }}
          ALGO_NAMES=(${ALGO_NAMES//,/ })
          PLUGIN_NAMES=(${PLUGIN_NAMES//,/ })
          declare -A ALGO_PLUGIN_MAP

          IFS=',' read -ra FILE_ARRAY <<< "$FILE_LIST"
          for file in "${FILE_ARRAY[@]}"; do
            for i in "${!ALGO_NAMES[@]}"; do
              # Check if the file name contains the algorithm name
              if [[ $file == *"${ALGO_NAMES[$i]}"* ]]; then
                # Add algo name and corresponding plugin name to the associative array
                ALGO_PLUGIN_MAP["${ALGO_NAMES[$i]}"]="${PLUGIN_NAMES[$i]}"
              fi
            done
          done

          # Extract keys (algo_name) from ALGO_PLUGIN_MAP map
          ALGO_TO_TEST=(${!ALGO_PLUGIN_MAP[@]})

          # Extract values (plugin_name) from ALGO_PLUGIN_MAP map
          PLUGIN_TO_TEST=(${ALGO_PLUGIN_MAP[@]})

          echo "ALGO_TO_TEST=${ALGO_TO_TEST[*]}" >> $GITHUB_ENV
          echo "PLUGIN_TO_TEST=${PLUGIN_TO_TEST[*]}" >> $GITHUB_ENV
          echo "Algorithms to test: ${ALGO_TO_TEST[*]}"
          echo "Plugins to test: ${PLUGIN_TO_TEST[*]}"

          matrix_include=$(for i in "${!ALGO_TO_TEST[@]}"; do echo "{\"algo_name\":\"${ALGO_TO_TEST[$i]}\", \"plugin_name\":\"${PLUGIN_TO_TEST[$i]}\"}"; done | jq -s . | tr -d '[:space:]')
          MATRIX="{\"include\":$matrix_include}"
          echo $MATRIX

          echo "branch_to_test=${{ env.BRANCH_TO_TEST }}" >> $GITHUB_OUTPUT
          echo "pr_num=${{ env.PR_NUM }}" >> $GITHUB_OUTPUT
          echo "matrix={\"include\":$matrix_include}" >> $GITHUB_OUTPUT

  run-pre-build-checks:
    needs: init-pre-build-checks
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.init-pre-build-checks.outputs.matrix) }}
      fail-fast: false
      max-parallel: 1
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.init-pre-build-checks.outputs.branch_to_test }}
          sparse-checkout: |
            .github/actions/pre-build-checks-plugin

      - name: Run pre-build checks
        id: pre_build_checks
        uses: ./.github/actions/pre-build-checks-plugin
        with:
          branch_to_test: ${{ needs.init-pre-build-checks.outputs.branch_to_test }}
          pr_num: ${{ needs.init-pre-build-checks.outputs.pr_num }}
          plugin_name: ${{ matrix.plugin_name }}
          algo_name: ${{ matrix.algo_name }}
          slack_url: ${{ secrets.SLACK_WEBHOOK_CI }}
